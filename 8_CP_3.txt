"""
3. Model: Function to optimize aggregate procution planning with multiple products - incl. Capacitated resorces

Parameters:

time_horizon: Time horizon (number of periods).
profit: Net profit per unit for each product.
holding_costs: Holding costs per unit for each product.
max_demand: Maximum demand for each product in each period.
workstation_capacity: Capacity of each workstation for each period.
initial_inventory: Initial inventory for each product.
products_total: Total number of products.
workstations_total: Total number of workstations.
min_sales: Minimum sales required for each product in each period.
production_time: Production time required for each product on each workstation.
resources_total: Total number of resources.
resource_requirement: Resource requirement per product for each resource.
resource_capacity: Resource capacity available for each period.


# Define indexes
i = an index of product, i = 1, . . . ,m, so m represents total number of products
t = an index of period, t = 1, . . . , ¯t, so ¯t represents planning horizon

# Define the parameters
max_demand[i][t] = maximum demand for product i in period t
min_sales[i][t] = minimum sales allowed of product i in period t

production_time[i][j] = time required on workstation j to produce one unit of product i
workstation_capacity[j][t] = capacity of workstation j in period t in units consistent with those used to define production_time[i][j]

resource_requirement[i][j] = units of resource j required per unit of product i
resource_capacity[j][t] = number of units of resource j available in period t

r[i] = net profit from one unit of product i
h[i] = cost to hold one unit of product i for one period t

# Define the Decision Variables:
X[i][t] = amount of product i produced in period t
S[i][t] = amount of product i sold in period t
I[i][t] = inventory of product i at end of period t (Ii0 is given as data)
"""

def supply_chain_optimization(time_horizon, profit, holding_costs, max_demand, workstation_capacity, initial_inventory, products_total, workstations_total, min_sales, production_time, resources_total, resource_requirement, resource_capacity):

    # Create the problem
    problem = pulp.LpProblem("Supply_Chain_Optimization", pulp.LpMaximize)

    # Index ranges for products, resources, and periods
    products = range(products_total)
    workstations = range(workstations_total)
    periods = range(time_horizon)
    resources = range(resources_total)

 # Decision Variables
    Amount_produced = [[LpVariable(f"Amount_produced_product_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]
    Amount_sold = [[LpVariable(f"Amount_sold_period_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]
    Inventory = [[LpVariable(f"Inventory_period_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]

    # Objective Function
    profit_term = pulp.lpSum(profit[i] * Amount_sold[i][t] for i in products for t in periods)
    holding_cost_term = pulp.lpSum(holding_costs[i] * I[i][t] for i in products for t in periods)
    problem += profit_term - holding_cost_term

    # Constraints
    for i in products:
        for t in periods:
            problem += Amount_produced[i][t] >= min_sales[i][t]  # Min sales constraint
            problem += Amount_sold[i][t] <= max_demand[i][t]  # Max demand constraint
            if t == 1:
                problem += Inventory[i][t] == initial_inventory[i] + Amount_produced[i][t] - Amount_sold[i][t]  # Inventory balance for first period
            else:
                problem += Inventory[i][t] == I[i][t-1] + Amount_produced[i][t] - Amount_sold[i][t]  # Inventory balance

    for j in workstations:
        for t in periods:
            problem += pulp.lpSum(production_time[i][j] * Amount_produced[i][t] for i in products) <= workstation_capacity[j][t]  # Capacity constraint

    for j in resources:
        for t in periods:
            problem += pulp.lpSum(resource_requirement[i][j] * Amount_produced[i][t] for i in products) <= resource_capacity[j][t]  # Modified capacity constraint

    # Solve the problem
    problem.solve()

    # Output the results
    for v in problem.variables():
        print(f'{v.name} = {v.varValue}')


    # Initialize lists to store usage values
    workstation_usage = [[0] * time_horizon for _ in range(workstations_total)]
    add_capacity_usage = [[0] * time_horizon for _ in range(resources_total)]


    workstation_usage = [
        [
            (sum(production_time[i][j] * X[i][t].varValue for i in products) / workstation_capacity[j][t]) * 100
            for t in periods
        ]
        for j in workstations
    ]


    add_capacity_usage = [
        [
            (resource_requirement[i][j] * Amount_produced[i][t].varValue / resource_capacity[j][t]) * 100 if resource_capacity[j][t] > 0 else 0
            for t in periods
        ]
        for j in resources
        for i in products
    ]	

    return problem, workstation_usage, add_capacity_usage
