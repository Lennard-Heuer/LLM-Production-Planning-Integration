"""
2. Model: Function to optimize aggregate production planning with multiple products - no extension.

Parameters:

time_horizon: Time horizon (number of periods).
profit: Net profit per unit for each product.
holding_costs: Holding costs per unit for each product.
max_demand: Maximum demand for each product in each period.
workstation_capacity: Capacity of each workstation for each period.
initial_inventory: Initial inventory for each product.
products_total: Total number of products.
workstations_total: Total number of workstations.
min_sales: Minimum sales required for each product in each period.
production_time: Production time required for each product on each workstation.


# Define indexes
i = an index of product, i = 1, . . . ,m, so m represents total number of products
t = an index of period, t = 1, . . . , ¯t, so ¯t represents planning horizon

# Define the parameters
max_demand[i][t] = maximum demand for product i in period t
min_sales[i][t] = minimum sales allowed of product i in period t

production_time[i][j] = time required on workstation j to produce one unit of product i
workstation_capacity[j][t] = capacity of workstation j in period t in units consistent with those used to define production_time[i][j]

profit[i] = net profit from one unit of product i
holding_costs[i] = cost to hold one unit of product i for one period t

# Define the Decision Variables:
X[i][t] = amount of product i produced in period t
S[i][t] = amount of product i sold in period t
I[i][t] = inventory of product i at end of period t (Ii0 is given as data)
"""

from gurobipy import Model, GRB

def optimize_production_plan(time_horizon, profit, holding_costs, max_demand, workstation_capacity, initial_inventory, products_total, workstations_total, min_sales, production_time):
    # Create the problem
    problem = Model("Aggregate_Production_Optimization")
    problem.ModelSense = GRB.MAXIMIZE

    # Index ranges for products, workstations, and periods
    products = range(products_total)
    workstations = range(workstations_total)
    periods = range(time_horizon)

    # Decision Variables
    X = problem.addVars(products, periods, lb=0, name="Produced")  # Amount produced
    S = problem.addVars(products, periods, lb=0, name="Sold")      # Amount sold
    I = problem.addVars(products, periods, lb=0, name="Inventory") # Inventory at the end of each period

    # Objective Function
    profit_term = sum(profit[i] * S[i, t] for i in products for t in periods)
    holding_cost_term = sum(holding_costs[i] * I[i, t] for i in products for t in periods)
    problem.setObjective(profit_term - holding_cost_term)

    # Constraints
    for i in products:
        for t in periods:
            # Sales constraints
            problem.addConstr(S[i, t] >= min_sales[i][t], name=f"Min_Sales_Product_{i}_Period_{t}")
            problem.addConstr(S[i, t] <= max_demand[i][t], name=f"Max_Demand_Product_{i}_Period_{t}")
            
            # Inventory balance constraints
            if t == 0:
                problem.addConstr(I[i, t] == initial_inventory[i] + X[i, t] - S[i, t], name=f"Inventory_Balance_Product_{i}_Period_{t}")
            else:
                problem.addConstr(I[i, t] == I[i, t-1] + X[i, t] - S[i, t], name=f"Inventory_Balance_Product_{i}_Period_{t}")

    for j in workstations:
        for t in periods:
            # Workstation capacity constraints
            problem.addConstr(sum(production_time[i][j] * X[i, t] for i in products) <= workstation_capacity[j][t], name=f"Workstation_Capacity_{j}_Period_{t}")

    # Solve the problem
    problem.optimize()

    Profit = problem.ObjVal

    # Extract results
    Produced = [[X[i, t].X for t in periods] for i in products]
    Sale = [[S[i, t].X for t in periods] for i in products]
    Inventory = [[I[i, t].X for t in periods] for i in products]

    # Calculate workstation utilization
    workstation_usage = [
        [
            (sum(production_time[i][j] * (X[i, t].X or 0) for i in products) / workstation_capacity[j][t]) * 100
            for t in periods
        ]
        for j in workstations
    ]

    # Print results
    print("Produced:", Produced)
    print("Sale:", Sale)
    print("Stock:", Inventory)
    print("Usage:", workstation_usage)
    print("Profit:", Profit)
