"""
9. Model: Production Planning with Setup and Capacity Constraints

Parameters:

time_horizon: Total number of periods (planning horizon).
products_total: List of products.
workstations_total: Total number of workstations.

profit[i]: Profit per unit of product i.
holding_costs[i]: Holding cost per unit of product i.
max_demand[i][t]: Maximum demand for product i in period t.
min_sales[i][t]: Minimum sales required for product i in period t.
workstation_capacity[w][t]: Capacity of workstation w in period t.
initial_inventory[i]: Initial inventory of product i at the start of period 1.

production_time[i][w]: Time required on workstation w to produce one unit of product i.
setup_cost[i]: Setup cost for switching to product i.

Decision Variables:

X[i][t]: Amount of product i produced in period t.
S[i][t]: Amount of product i sold in period t.
I[i][t]: Inventory of product i at the end of period t.
Y[i][t]: Binary setup variable for product i in period t (1 if setup is active, 0 otherwise).

Objective:

Maximize the total profit across all products and periods, minus holding costs and setup costs.

Constraints:

1. Sales Constraints: Ensure that the sales of each product are within the minimum and maximum demand bounds.
2. Inventory Balance: Ensure that inventory in each period reflects production, previous inventory, and sales.
3. Capacity Constraints: Ensure that total production does not exceed the capacity of the workstations in each period.
4. Production Setup Constraints: Production is allowed only if the setup variable is active for the product in the period.
5. Unique Setup Constraint: Only one product can be set up at any given time.
"""

from pulp import LpMaximize, LpProblem, LpVariable, lpSum, LpBinary

def production_optimization_with_setup(
    time_horizon, products_total, workstations_total, profit, holding_costs, max_demand,
    min_sales, workstation_capacity, initial_inventory, production_time, setup_cost
):
    # Initialize the model
    problem = LpProblem("Production_Optimization_with_Setup", LpMaximize)

    # Decision Variables
    X = LpVariable.dicts("Produced", (products_total, range(time_horizon)), lowBound=0, cat="Continuous")  # Production
    S = LpVariable.dicts("Sold", (products_total, range(time_horizon)), lowBound=0, cat="Continuous")      # Sales
    I = LpVariable.dicts("Inventory", (products_total, range(time_horizon)), lowBound=0, cat="Continuous") # Inventory
    Y = LpVariable.dicts("Setup", (products_total, range(time_horizon)), cat=LpBinary)  # Setup binary variable

    # Objective Function: Maximize profit minus holding and setup costs
    profit_term = lpSum(profit[p] * S[p][t] for p in products_total for t in range(time_horizon))
    holding_cost_term = lpSum(holding_costs[p] * I[p][t] for p in products_total for t in range(time_horizon))
    setup_cost_term = lpSum(setup_cost[p] * Y[p][t] for p in products_total for t in range(time_horizon))
    problem += profit_term - holding_cost_term - setup_cost_term, "Maximize_Profit"

    # Constraints
    for p in products_total:
        for t in range(time_horizon):
            # Sales Constraints
            problem += S[p][t] >= min_sales[p][t], f"Min_Sales_{p}_{t}"
            problem += S[p][t] <= max_demand[p][t], f"Max_Demand_{p}_{t}"

            # Inventory Balance Constraints
            if t == 0:
                problem += I[p][t] == initial_inventory[p] + X[p][t] - S[p][t], f"Inventory_Balance_{p}_{t}"
            else:
                problem += I[p][t] == I[p][t - 1] + X[p][t] - S[p][t], f"Inventory_Balance_{p}_{t}"

            # Production Setup Constraints
            problem += X[p][t] <= Y[p][t] * max_demand[p][t], f"Production_Setup_{p}_{t}"

    # Capacity Constraints
    for w in range(workstations_total):
        for t in range(time_horizon):
            problem += lpSum(production_time[p][w] * X[p][t] for p in products_total) <= workstation_capacity[w][t], f"Capacity_{w}_{t}"

    # Unique Setup Constraint
    for t in range(time_horizon):
        problem += lpSum(Y[p][t] for p in products_total) <= 1, f"Unique_Setup_{t}"

    # Solve the problem
    problem.solve()

    # Collect Results
    Produced = [[X[p][t].varValue for t in range(time_horizon)] for p in products_total]
    Sold = [[S[p][t].varValue for t in range(time_horizon)] for p in products_total]
    Inventory = [[I[p][t].varValue for t in range(time_horizon)] for p in products_total]
    Setup = [[Y[p][t].varValue for t in range(time_horizon)] for p in products_total]
    Profit = problem.objective.value()

    # Calculate workstation usage as a percentage
    workstation_usage = [
        [
            sum((production_time[p][w] * (X[p][t].varValue or 0)) / workstation_capacity[w][t] * 100 if workstation_capacity[w][t] > 0 else 0
                for p in products_total)
            for t in range(time_horizon)
        ]
        for w in range(workstations_total)
    ]

    # Print results
    print("Produced:", Produced)
    print("Sold:", Sold)
    print("Inventory:", Inventory)
    print("Setup:", Setup)
    print("Usage:", workstation_usage)