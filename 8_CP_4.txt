"""
4. Model: Function to optimize aggregate procution planning with multiple products. - incl. Capacity Reduciton Factor

Parameters:

products_total: Total number of products.
workstations_total: Total number of workstations.
time_horizon: Time horizon (number of periods).
max_demand: Maximum demand for each product in each period.
min_sales: Minimum sales required for each product in each period.
production_time: Production time required for each product on each workstation.
workstation_capacity: Capacity of each workstation for each period.
profit: Net profit per unit for each product.
holding_costs: Holding costs per unit for each product.
initial_inventory: Initial inventory for each product.
capacity_reduction_factor: Percentage of the capacity that should be used practically at max.

# Define indexes
i = an index of product, i = 1, . . . ,m, so m represents total number of products
t = an index of period, t = 1, . . . , ¯t, so ¯t represents planning horizon

# Define the parameters
max_demand[i][t] = maximum demand for product i in period t
min_sales[i][t] = minimum sales allowed of product i in period t

production_time[i][j] = time required on workstation j to produce one unit of product i
workstation_capacity[j][t] = capacity of workstation j in period t in units consistent with those used to define production_time[i][j]
capacity_reduction_factor[j] = Percentage of the capacity that should be used practically at max
r[i] = net profit from one unit of product i
h[i] = cost to hold one unit of product i for one period t

# Define the Decision Variables:
X[i][t] = amount of product i produced in period t
S[i][t] = amount of product i sold in period t
I[i][t] = inventory of product i at end of period t (Ii0 is given as data)
"""

from pulp import LpMaximize, LpProblem, LpVariable, lpSum, LpConstraint

def supply_chain_optimization_extended(
    products_total, workstations_total, time_horizon, max_demand, min_sales, production_time, workstation_capacity,
    profit, holding_costs, initial_inventory, capacity_reduction_factor
):
    # Create the problem
    problem = LpProblem("Supply_Chain_Optimization_Extended", LpMaximize)

    # Index ranges for products, workstations, and periods
    products = range(products_total)
    workstations = range(workstations_total)
    periods = range(time_horizon)

    # Decision Variables
    Amount_produced = [[LpVariable(f"Amount_produced_product_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]
    Amount_sold = [[LpVariable(f"Amount_sold_period_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]
    Inventory = [[LpVariable(f"Inventory_period_{i}, period_{t}", lowBound=0, cat='Continuous') for t in periods] for i in products]

    # Objective Function
    profit_term = lpSum(profit[i] * Amount_sold[i][t] for i in products for t in periods)
    holding_cost_term = lpSum(holding_cost[i] * Inventory[i][t] for i in products for t in periods)
    problem += profit_term - holding_cost_term

    # Constraints
    for i in products:
        for t in periods:
            # Sales constraints
            problem += Amount_sold[i][t] >= min_sales[i][t], f"Min_Sales_{i}_{t}"
            problem += Amount_sold[i][t] <= max_demand[i][t], f"Max_Demand_{i}_{t}"
            # Inventory balance constraint
            if t == 1:
                problem += Inventory[i][t] == initial_inventory[i] + Amount_produced[i][t] - Amount_sold[i][t], f"Inventory_Balance_{i}_{t}"
            else:
                problem += Inventory[i][t] == Inventory[i][t-1] + Amount_produced[i][t] - Amount_sold[i][t], f"Inventory_Balance_{i}_{t}"

    for j in workstations:
        for t in periods:
            # Adjusted capacity constraint
            problem += lpSum(production_time[i][j] * Amount_produced[i][t] for i in products) <= \
                       workstation_capacity[j][t] * capacity_reduction_factor, \
                       f"Adjusted_Capacity_{j}_{t}"

    # Solve the problem
    problem.solve()

    # Output the results
    for v in problem.variables():
        print(f'{v.name} = {v.varValue}')

    # Initialize lists to store usage values
    workstation_usage = [[0] * time_horizon for _ in range(workstations_total)]

    workstation_usage = [
        [
            (sum(production_time[i][j] * X[i][t].varValue for i in products) / workstation_capacity[j][t]) * 100
            for t in periods
        ]
        for j in workstations
    ]

    return problem, workstation_usage