import os
import collections
from ortools.sat.python import cp_model

print("Current working directory:", os.getcwd())

# Benutzerspezifische MRP-Daten
mrp = {
    'P1': [600.0, 0.0, 0.0, 0.0],
    'P2': [140.0, 110.0, 0.0, 0.0],
    'P3': [310.0, 0.0, 0.0, 0.0],
    'P4': [110.0, 0.0, 0.0, 0.0],
    'P5': [2430.0, 0.0, 0.0, 0.0]
}

# Benutzerspezifische Stücklisten (BOM)
bom_data = {
    'P1': {'P4': 2, 'P5': 1},
    'P2': {'P4': 1},
    'P3': {'P4': 3, 'P5': 2},
    'P4': {},
    'P5': {}
}

# Benutzerspezifische Produktionszeiten
production_times = {
    'P1': {0: 2, 1: 3},
    'P2': {0: 1, 1: 2},
    'P3': {0: 3, 1: 4},
    'P4': {0: 1, 1: 4},
    'P5': {0: 2, 1: 1}
}

# Funktionsdefinitionen (propagate_demand, create_jobs_data_for_period)

def propagate_demand(mrp, bom_data, period):
    new_mrp = {product: mrp[product][:] for product in mrp}  # Kopie der ursprünglichen MRP-Daten

    # Nachfrage auf Komponenten propagieren
    for product in bom_data:
        qty_needed = mrp[product][period]
        if qty_needed > 0:
            for component, component_qty in bom_data[product].items():
                new_mrp[component][period] += qty_needed * component_qty  # Indirekte Nachfrage hinzufügen

    return new_mrp

def create_jobs_data_for_period(mrp, production_times, period):
    jobs_data = []
    for product, quantities in mrp.items():
        qty = int(quantities[period])
        if qty > 0:
            for machine_id, time_per_unit in production_times[product].items():
                proc_time = time_per_unit * qty
                jobs_data.append((product, machine_id, proc_time, period))
    return jobs_data

def solve_for_each_period(mrp, bom_data, production_times):
    all_assigned_jobs = {}
    machines_counts = {}
    for period in range(len(next(iter(mrp.values())))):
        print(f"--- Lösung für Periode {period} ---")

        updated_mrp = propagate_demand(mrp, bom_data, period)
        jobs_data = create_jobs_data_for_period(updated_mrp, production_times, period)

        if not jobs_data:
            print(f"Keine Jobs zur Planung für Periode {period}.")
            all_assigned_jobs[period] = None
            machines_counts[period] = 0
            continue

        machines_count = 1 + max(task[1] for task in jobs_data)
        all_machines = range(machines_count)
        horizon = sum(int(task[2]) for task in jobs_data)

        model = cp_model.CpModel()

        task_type = collections.namedtuple("task_type", "start end interval")
        assigned_task_type = collections.namedtuple(
            "assigned_task_type", "start job index duration product"
        )

        all_tasks = {}
        machine_to_intervals = collections.defaultdict(list)
        product_to_tasks = collections.defaultdict(list)

        for job_id, task in enumerate(jobs_data):
            product, machine, duration, period = task
            duration = int(duration)
            suffix = f"_{job_id}_0"
            start_var = model.NewIntVar(0, horizon, "start" + suffix)
            end_var = model.NewIntVar(0, horizon, "end" + suffix)
            interval_var = model.NewIntervalVar(
                start_var, duration, end_var, "interval" + suffix
            )
            all_tasks[job_id, 0] = task_type(
                start=start_var, end=end_var, interval=interval_var
            )
            machine_to_intervals[machine].append(interval_var)

            product_to_tasks[product].append((start_var, end_var))

        for machine in all_machines:
            model.AddNoOverlap(machine_to_intervals[machine])

        for product, components in bom_data.items():
            assembly_starts = [task[0] for task in product_to_tasks.get(product, [])]
            if assembly_starts:
                assembly_earliest_start = model.NewIntVar(0, horizon, f"{product}_earliest_start")
                model.AddMinEquality(assembly_earliest_start, assembly_starts)

                for component in components:
                    component_ends = [task[1] for task in product_to_tasks.get(component, [])]
                    if component_ends:
                        component_latest_end = model.NewIntVar(0, horizon, f"{component}_latest_end")
                        model.AddMaxEquality(component_latest_end, component_ends)
                        model.Add(component_latest_end <= assembly_earliest_start)

        obj_var = model.NewIntVar(0, horizon, "makespan")
        model.AddMaxEquality(
            obj_var,
            [all_tasks[job_id, 0].end for job_id in range(len(jobs_data))],
        )
        model.Minimize(obj_var)

        solver = cp_model.CpSolver()
        status = solver.Solve(model)

        if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
            print("Lösung gefunden:")
            assigned_jobs = collections.defaultdict(list)
            for job_id, task in enumerate(jobs_data):
                machine = task[1]
                assigned_jobs[machine].append(
                    assigned_task_type(
                        start=solver.Value(all_tasks[job_id, 0].start),
                        job=job_id,
                        index=0,
                        duration=int(task[2]),
                        product=task[0],
                    )
                )

            output = ""
            for machine in all_machines:
                assigned_jobs[machine].sort(key=lambda x: x.start)
                sol_line_tasks = "Maschine " + str(machine) + ": "
                sol_line = "           "

                for assigned_task in assigned_jobs[machine]:
                    name = f"{assigned_task.product}"
                    sol_line_tasks += f"{name:15}"

                    start = assigned_task.start
                    duration = assigned_task.duration
                    sol_tmp = f"[{start},{start + duration}]"
                    sol_line += f"{sol_tmp:15}"

                sol_line += "\n"
                sol_line_tasks += "\n"
                output += sol_line_tasks
                output += sol_line

            print(f"Optimale Planlänge für Periode {period}: {solver.ObjectiveValue()}")
            print(output)

            # Speichern der zugewiesenen Jobs für diese Periode
            all_assigned_jobs[period] = assigned_jobs
            machines_counts[period] = machines_count
        else:
            print(f"Keine Lösung gefunden für Periode {period}.")
            all_assigned_jobs[period] = None
            machines_counts[period] = machines_count

    return all_assigned_jobs, machines_counts

# Ausführen der Planungsfunktion und Speichern der Daten
assigned_jobs_data, machines_counts = solve_for_each_period(mrp, bom_data, production_times)"""