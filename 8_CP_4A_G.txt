"""
4. Model: Function to optimize aggregate procution planning with multiple products. - incl. Capacity Reduciton Factor

Parameters:

products_total: Total number of products.
workstations_total: Total number of workstations.
time_horizon: Time horizon (number of periods).
max_demand: Maximum demand for each product in each period.
min_sales: Minimum sales required for each product in each period.
production_time: Production time required for each product on each workstation.
workstation_capacity: Capacity of each workstation for each period.
profit: Net profit per unit for each product.
holding_costs: Holding costs per unit for each product.
initial_inventory: Initial inventory for each product.
capacity_reduction_factor: Percentage of the capacity that should be used practically at max.

# Define indexes
i = an index of product, i = 1, . . . ,m, so m represents total number of products
t = an index of period, t = 1, . . . , ¯t, so ¯t represents planning horizon

# Define the parameters
max_demand[i][t] = maximum demand for product i in period t
min_sales[i][t] = minimum sales allowed of product i in period t

production_time[i][j] = time required on workstation j to produce one unit of product i
workstation_capacity[j][t] = capacity of workstation j in period t in units consistent with those used to define production_time[i][j]
capacity_reduction_factor[j] = Percentage of the capacity that should be used practically at max
profit[i] = net profit from one unit of product i
holding_costs[i] = cost to hold one unit of product i for one period t

# Define the Decision Variables:
X[i][t] = amount of product i produced in period t
S[i][t] = amount of product i sold in period t
I[i][t] = inventory of product i at end of period t (Ii0 is given as data)
"""
from gurobipy import Model, GRB

def supply_chain_math_model(
    time_horizon, profit, holding_costs, max_demand, workstation_capacity, 
    initial_inventory, products_total, workstations_total, min_sales, 
    production_time, resources_total, resource_requirement, resource_capacity, 
    capacity_reduction_factor
):
    # Create the problem
    model = Model("Supply_Chain_Optimization")
    model.ModelSense = GRB.MAXIMIZE

    # Index ranges
    products = range(products_total)
    periods = range(time_horizon)
    workstations = range(workstations_total)
    resources = range(resources_total)

    # Decision Variables
    X = model.addVars(products, periods, lb=0, name="Produced")  # Production
    S = model.addVars(products, periods, lb=0, name="Sold")      # Sales
    I = model.addVars(products, periods, lb=0, name="Inventory") # Inventory

    # Objective Function
    profit_term = sum(profit[i] * S[i, t] for i in products for t in periods)
    holding_cost_term = sum(holding_costs[i] * I[i, t] for i in products for t in periods)
    model.setObjective(profit_term - holding_cost_term)

    # Constraints
    for i in products:
        for t in periods:
            model.addConstr(S[i, t] >= min_sales[i][t], name=f"Min_Sales_{i}_{t}")
            model.addConstr(S[i, t] <= max_demand[i][t], name=f"Max_Demand_{i}_{t}")

    for i in products:
        for t in periods:
            if t == 0:
                model.addConstr(
                    I[i, t] == initial_inventory[i] + X[i, t] - S[i, t], name=f"Inventory_Balance_{i}_{t}"
                )
            else:
                model.addConstr(
                    I[i, t] == I[i, t - 1] + X[i, t] - S[i, t], name=f"Inventory_Balance_{i}_{t}"
                )

    for j in workstations:
        for t in periods:
            model.addConstr(
                sum(production_time[i][j] * X[i, t] for i in products) <= workstation_capacity[j][t] * capacity_reduction_factor[j], 
                name=f"Adjusted_Workstation_Capacity_{j}_{t}"
            )

    for r in resources:
        for t in periods:
            model.addConstr(
                sum(resource_requirement[i][r] * X[i, t] for i in products) <= resource_capacity[r][t], 
                name=f"Resource_Capacity_{r}_{t}"
            )

    # Solve the problem
    model.optimize()

    Profit = problem.ObjVal

    # Extract results
    Produced = [[X[i, t].X for t in periods] for i in products]
    Sale = [[S[i, t].X for t in periods] for i in products]
    Inventory = [[I[i, t].X for t in periods] for i in products]

    # Calculate Workstation Utilization
    workstation_usage = [
        [
            (sum(production_time[i][j] * (X[i, t].X or 0) for i in products) / (workstation_capacity[j][t] * capacity_reduction_factor[j])) * 100
            if workstation_capacity[j][t] > 0 else 0
            for t in periods
        ]
        for j in workstations
    ]

    # Calculate Resource Utilization
    add_capacity_usage = [
        [
            (sum(resource_requirement[i][r] * (X[i, t].X or 0) for i in products) / resource_capacity[r][t]) * 100
            if resource_capacity[r][t] > 0 else 0
            for t in periods
        ]
        for r in resources
    ]

    # Print Results
    print("Produced:", Produced)
    print("Sale:", Sale)
    print("Inventory:", Inventory)
    print("Profit:", Profit)

    print("Usage:", workstation_usage)
    print("UsageADD:", add_capacity_usage)
