"""
3. Model: Function to optimize aggregate procution planning with multiple products - incl. Capacitated resorces

Parameters:

time_horizon: Time horizon (number of periods).
profit: Net profit per unit for each product.
holding_costs: Holding costs per unit for each product.
max_demand: Maximum demand for each product in each period.
workstation_capacity: Capacity of each workstation for each period.
initial_inventory: Initial inventory for each product.
products_total: Total number of products.
workstations_total: Total number of workstations.
min_sales: Minimum sales required for each product in each period.
production_time: Production time required for each product on each workstation.
resources_total: Total number of resources.
resource_requirement: Resource requirement per product for each resource.
resource_capacity: Resource capacity available for each period.


# Define indexes
i = an index of product, i = 1, . . . ,m, so m represents total number of products
t = an index of period, t = 1, . . . , ¯t, so ¯t represents planning horizon

# Define the parameters
max_demand[i][t] = maximum demand for product i in period t
min_sales[i][t] = minimum sales allowed of product i in period t

production_time[i][j] = time required on workstation j to produce one unit of product i
workstation_capacity[j][t] = capacity of workstation j in period t in units consistent with those used to define production_time[i][j]

resource_requirement[i][j] = units of resource j required per unit of product i
resource_capacity[j][t] = number of units of resource j available in period t

profit[i] = net profit from one unit of product i
holding_costs[i] = cost to hold one unit of product i for one period t

# Define the Decision Variables:
X[i][t] = amount of product i produced in period t
S[i][t] = amount of product i sold in period t
I[i][t] = inventory of product i at end of period t (Ii0 is given as data)
"""

from pulp import LpMaximize, LpProblem, LpVariable, lpSum

def supply_chain_math_model(
    time_horizon, profit, holding_costs, max_demand, workstation_capacity, 
    initial_inventory, products_total, workstations_total, min_sales, 
    production_time, resources_total, resource_requirement, resource_capacity
):
    # Create the problem
    model = LpProblem("Supply_Chain_Optimization", LpMaximize)

    # Index ranges
    products = range(products_total)
    periods = range(time_horizon)
    workstations = range(workstations_total)
    resources = range(resources_total)

    # Decision Variables
    X = LpVariable.dicts("Produced", (products, periods), lowBound=0, cat="Continuous")  # Production
    S = LpVariable.dicts("Sold", (products, periods), lowBound=0, cat="Continuous")      # Sales
    I = LpVariable.dicts("Inventory", (products, periods), lowBound=0, cat="Continuous") # Inventory

    # Objective Function
    model += lpSum(
        profit[i] * S[i][t] - holding_costs[i] * I[i][t]
        for i in products for t in periods
    ), "Maximize_Profit"

    # Constraints
    # Demand and Sales Constraints
    for i in products:
        for t in periods:
            model += S[i][t] >= min_sales[i][t], f"Min_Sales_{i}_{t}"
            model += S[i][t] <= max_demand[i][t], f"Max_Demand_{i}_{t}"

    # Inventory Balance Constraints
    for i in products:
        for t in periods:
            if t == 0:
                model += (
                    I[i][t] == initial_inventory[i] + X[i][t] - S[i][t]
                ), f"Inventory_Balance_{i}_{t}"
            else:
                model += (
                    I[i][t] == I[i][t - 1] + X[i][t] - S[i][t]
                ), f"Inventory_Balance_{i}_{t}"

    # Workstation Capacity Constraints
    for j in workstations:
        for t in periods:
            model += lpSum(
                production_time[i][j] * X[i][t] for i in products
            ) <= workstation_capacity[j][t], f"Workstation_Capacity_{j}_{t}"

    # Resource Capacity Constraints
    for r in resources:
        for t in periods:
            model += lpSum(
                resource_requirement[i][r] * X[i][t] for i in products
            ) <= resource_capacity[r][t], f"Resource_Capacity_{r}_{t}"

    # Solve the problem
    model.solve()

    # Extract results
    Produced = [[X[i][t].varValue for t in periods] for i in products]
    Sold = [[S[i][t].varValue for t in periods] for i in products]
    Inventory = [[I[i][t].varValue for t in periods] for i in products]

    # Calculate Workstation Utilization
    workstation_usage = [
        [
            (sum(production_time[i][j] * (X[i][t].varValue or 0) for i in products) / workstation_capacity[j][t]) * 100
            if workstation_capacity[j][t] > 0 else 0
            for t in periods
        ]
        for j in workstations
    ]

    # Calculate Resource Utilization
    add_capacity_usage = [
        [
            (sum(resource_requirement[i][r] * (X[i][t].varValue or 0) for i in products) / resource_capacity[r][t]) * 100
            if resource_capacity[r][t] > 0 else 0
            for t in periods
        ]
        for r in resources
    ]

    # Print Results
    print("Produced:", Produced)
    print("Sold:", Sold)
    print("Inventory:", Inventory)
    print("Usage:", workstation_usage)
    print("UsageADD:", add_capacity_usage)
